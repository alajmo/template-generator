#!/usr/bin/env bash

trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

set -eEu
set -o pipefail

SAFER_IFS=$'\n\t'
IFS="${SAFER_IFS}"

_ME=$(basename "${0}")
_VERSION="0.4.0"
_USE_DEBUG=0

# _debug()
#
# Usage:
#   _debug printf "Debug info. Variable: %s\n" "$0"
#
# A simple function for executing a specified command if the `$_USE_DEBUG`
# variable has been set. The command is expected to print a message and
# should typically be either `echo`, `printf`, or `cat`.
__DEBUG_COUNTER=0
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]
  then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    # Prefix debug message with "bug (U+1F41B)"
    printf "🐛  %s " "${__DEBUG_COUNTER}"
    "${@}"
    printf "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
  fi
}

debug() {
  _debug echo "${@}"
}

# _die()
#
# Usage:
#   _die printf "Error message. Variable: %s\n" "$0"
#
# A simple function for exiting with an error after executing the specified
# command. The command is expected to print a message and should typically
# be either `echo`, `printf`, or `cat`.
_die() {
  # Prefix die message with "cross mark (U+274C)", often displayed as a red x.
  printf "❌  "
  "${@}" 1>&2
  exit 1
}

# die()
#
# Usage:
#   die "Error message. Variable: $0"
#
# Exit with an error and print the specified message.
#
# This is a shortcut for the _die() function that simply echos the message.
die() {
  _die echo "${@}"
}

# _print_help()
#
# Usage:
#   _print_help
#
# Print the program help information.
_print_help() {
  cat <<HEREDOC

template-generator - Template generator CLI

Usage: ${_ME} [command] [arguments]

Options:
  -h, --help              Print this help.
  -v,--version            Print script version.

Usage:
  list|ls|l [subdirectory]                List boilerplates
  generate|g [boilerplate] [destination]  Generate boilerplate
  preview|p [boilerplate]                 Preview boilerplate
  edit|e [boilerplate]                    Edit boilerplate in editor

Looks for boilerplates in the following directories (in the given order):
  Environment variable BOILERPLATES_PATH
  \$PWD/.boilerplates/
  \$PWD/boilerplates/
  ~/.boilerplates/
  ~/boilerplates/

HEREDOC
}

_print_version() {
  printf "v%s \n" "$_VERSION"
}

optstring=xo:h

unset options
while ((${#}))
do
  case ${1} in
    -[!-]?*)
      for ((i=1; i<${#1}; i++))
      do
        c=${1:i:1}
        options+=("-${c}")

        if [[ ${optstring} = *"${c}:"* && ${1:i+1} ]]
        then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    --?*=*)
      options+=("${1%%=*}" "${1#*=}")
      ;;
    --)
      options+=(--endopts)
      shift
      options+=("${@}")
      break
      ;;
    *)
      options+=("${1}")
      ;;
  esac

  shift
done
set -- "${options[@]:-}"
unset options

_get_boilerplates_path() {
  local path
  local env_path=${BOILERPLATES_PATH:-""}

  if [[ -n "$env_path" ]]; then
    path="$env_path"
  elif [[ -d "$PWD/.boilerplates/" ]]; then
    path="$PWD/.boilerplates/"
  elif [[ -d "$PWD/boilerplates/" ]]; then
    path="$PWD/boilerplates/"
  elif [[ -d "$HOME/.boilerplates/" ]]; then
    path="$HOME/.boilerplates/"
  elif [[ -d "$HOME/boilerplates/" ]]; then
    path="$HOME/boilerplates/"
  fi

  echo "$path"
}

# Add dest to list
# @param {String} filepath
# @param {String} directory
_list_boilerplates() {
  local filepath=$1
  local directory="${2:-}"
  local level="${3:-}"
  local boilerplates_path

  if [[ -z $level ]]; then
    level=9999
  fi

  if [[ -z $directory ]]; then
    boilerplates_path="$filepath"
  else
    boilerplates_path="$filepath$directory"
  fi

  tree "$boilerplates_path" -L "$level" -a -I "*.git*"
}

# @param boilerplates_path
# @param boilerplate
# @param dest
_generate_boilerplate() {
  local filepath="$1$2"
  local dest="${3:-}"

  if [[ -z $dest ]]; then
    dest="."
  fi

  cp "$filepath" "$dest" -ir
}

_edit_boilerplate() {
  local filepath="$1$2"
  $EDITOR "$filepath"
}

_preview_boilerplate() {
  local filepath="$1$2"
  cat "$filepath"
}

# Program option parameters.
_PRINT_PARAM=0
_USE_DEBUG=0

# Options
_VERSION_PARAM=""

_LEVEL_ARG=""

_LIST_PARAM=""
_LIST_ARG=""

_GENERATE_PARAM=""
_GENERATE_ARG=""
_GENERATE_ARG2=""

_EDIT_PARAM=""
_EDIT_ARG=""

_PREVIEW_PARAM=""
_PREVIEW_ARG=""

# Usage:
#   _require_argument <option> <argument>
#
# If <argument> is blank or another option, print an error message and exit
# with status 1.
_require_argument() {
  local _option="${1:-}"
  local _argument="${2:-}"

  if [[ -z "${_argument}" ]] || [[ "${_argument}" =~ ^- ]]
  then
    _die printf "Option requires a argument: %s\n" "${_option}"
  fi
}

while [ ${#} -gt 0 ]
do
  __option="${1:-}"
  __maybe_param="${2:-}"
  __maybe_param2="${3:-}"
  case "${__option}" in
    -h|--help)
      _PRINT_PARAM=1
      ;;
    -v|--version)
      _VERSION_PARAM=1;
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    l|ls|list)
      _LIST_PARAM=1;
      _LIST_ARG="${__maybe_param}";
      ;;
    g|generate)
      _GENERATE_PARAM=1;
      _require_argument "${__option}" "${__maybe_param}"
      _GENERATE_ARG="${__maybe_param}";
      _GENERATE_ARG2="${__maybe_param2}";
      ;;
    p|preview)
      _PREVIEW_PARAM=1;
      _require_argument "${__option}" "${__maybe_param}"
      _PREVIEW_ARG="${__maybe_param}";
      ;;
    e|edit)
      _EDIT_PARAM=1;
      _require_argument "${__option}" "${__maybe_param}"
      _EDIT_ARG="${__maybe_param}";
      ;;
    -L|--level)
      _LEVEL_ARG="${__maybe_param}";
      ;;
    --endopts)
      break
      ;;
    -*)
      _die printf "Unexpected option: %s\n" "${__option}"
      ;;
  esac
  shift
done

_main() {
  local boilerplates_path
  boilerplates_path=$(_get_boilerplates_path)

  if ((_PRINT_PARAM))
  then
    _print_help
  elif ((_VERSION_PARAM)); then
    _print_version
  elif ((_LIST_PARAM)); then
    _list_boilerplates "$boilerplates_path" "$_LIST_ARG"
  elif ((_GENERATE_PARAM)); then
    _generate_boilerplate "$boilerplates_path" "$_GENERATE_ARG" "$_GENERATE_ARG2"
  elif ((_EDIT_PARAM)); then
    _edit_boilerplate "$boilerplates_path" "$_EDIT_ARG"
  elif ((_PREVIEW_PARAM)); then
    _preview_boilerplate "$boilerplates_path" "$_PREVIEW_ARG"
  else
    _list_boilerplates "$boilerplates_path" "" "$_LEVEL_ARG"
  fi
}

_main "${@:-}"
